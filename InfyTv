-----API------
@RestController
@RequestMapping(value="")
@Validated

@PostMapping(value="user")
public ResponseEntity<String> registerUser(@Valid @RequestBody UserDTO userDTO) throws SeriesBookingException
{
Integer id=seriesBookingService.registerUser(userDTO);
String msg=environment.getProperty("API.REGISTRATION_SUCCESSS")+id;
return new ResponseEntity<String>(msg,HttpStatus.CREATED);
}

------Service-----
@Service("value=seriesBookingService")
@Transcational
public class SeriesBookingServiceImpl implements SeriesBookingService{
@Autowired
private SeriesRepository seriesRepository;
@Autowired 
private UserRepository userRepository;

@Override
public Integer registerUser(UserDTO userDTO) throws SeriesBookingException
{
  Optional<Series> s=seriesRepository.findBySeriesName(userDTO.getSeries(),getSeriesName());
  Series se=s.orElseThrow(()-> new SeriesBookingException("Service.SERIES_NOT-FOUND"));
  User u =new UserDTO();
  u.setEmail(userDTO.getEmail());
  u.setUserName(userDTO.getUserName());
  u.setSeries(se);
  return userRepository.save(u).getRegistrationId();
}
@Override
public List<UserDTO> getDetailsByUserEmail(String email) throws SeriesBookingException
{
List<User> u=userRepository.findByEmail(email);
if(u.isEmpty()){
  throw new SeriesBookingException("Series.NO_DETAILS_FOUND");
  }
  List<UserDTO> dto=new ArrayList<>();
  for(User i:u){
  UserDTO k=new UserDTO();
  k.setEmail(i.getEmail());
  k.setRegistrationId(i.getRegitraionId());
  k.setUserName(i.getUserName());
  SeriesDTO s=new SeriesDTO();
  s.setSeriesId(i.getSeries().getSeriesId());
  s.setSeriesName(i.getSeries().getSeriesName());
  s.setSeriesType(i.getSeries().getSeriesType());
  k.setSeries(s);
  dto.add(k);
  }
  return dto;
}

}





























