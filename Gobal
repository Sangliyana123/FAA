-----------Validator--------
public static void validateStudent(StudentDTO studentDTO) throws GlobalEducationException{
if (! isValidIntakeYear(studentDTO.getIntakeYear())){
throw new GlobalEducationException("StudentValidator.INVALID_INTAKE_YEAR");
}
}
public static Boolean isValidIntakeYear(Integer intakeYear){
if (intakeYear<LocalDate.now().getYear()){
return false;
}
else{
return true;
}
}
}

--------API-----------
@RestController
@RequestMapping(value="/global-edu")
@Validated

@Autowired

@PostMapping(value="/student")
public ResponseEntity<StudentDTO> registerStudent(@Valid @RequestBody StudentDTO studentDTO)
  throws GlobalEducatonException{
StudentDTO studentdto=studentService.registerStudent(studentDTO);
return new ResponseEntity<>(studentdto,HttpStatus.CREATED);

}

@GetMapping(value="/student/{country}/{intakeYear}")
public ResponseEntity<List<StudentDTO>> getStudentByCountryAndIntake(@PathVariable String country,
          @PathVariable @Min(value=1000,message="{Student.intakeyear.Invalid}") Integer intakeYear)
             throws GlobalEducationException{
List<StudentDTO> studentdto1=studentService.getStudentByCountryAndIntake(country,intakeYear);
return new ResponseEntity<>(studentdto1,HttpStatus.OK);
     }
}

--------Repository---------


public interface StudentRepository extends CrudRepository<Student,Integer>{
public Optional<Student> findByEmailId(String emailId);
public List<Student> findStudentByInterestedCountryAndIntakeYear(String Country,Integer intakeYear);
}



---------Service---------
@Service(value="/studentservice")
@Transactional
public class studentServiceImpl implements StudentService{

  @Autowired
  private StudentRepository studentRepository;

  @override
  public StudentDTO registerStudent(StudentDTO studentDTO) throws GlobalEducationException{
  StudentValidator.validateStudent(studentDTO);
  Optional<Student>optional= studentRepository.findByEmailId(studentDTO.getEmailId());

    if(optional.isPresent()){
	throw new GlobalEducationException("studentService.STUDENT_ALREADY_EXIST");
	}
   Student std = StudentDTO.prepareEntity(StudentDTO);
   std=studentRepository.save(std);
   studentDTO.setStudentId(std.getStudentId());
   
   return studentDTO;
   }
   
   @Override
   public List<StudentDTO> getStudentByCountryAndIntake(String country, Intiger intakeYear) throws GlobalEducationException {
   
   List<Student> std = studentRepository.findStudentByInterestedCountryAndIntakeYear(country, intakeYear);
   if(std.isEmpty()|| std.size() == 0){
   throw new GlobalEducationException("StudentService.NO_STUDENTS_FOUND");
   }
   
   List<StudentDTO> dtos = new ArrayList<>();
   std.stream().forEach(x-> dtos.add(new StudentDTO().prepareDTO(x)));
   dtos.sort((x1,x2) -> x1.getStudentName().compareTo(x2.getStudentName()));
   return dtos;
   }
   }
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
	
   
   
